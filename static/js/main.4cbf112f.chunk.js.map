{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["bubbleSort","arr","animations","len","length","anySwaps","i","j","push","temp","insertionSort","currentIndex","selectionSort","minIndex","mergeSort","mergeSortHelp","aux","lo","hi","mid","Math","floor","index","mergeSortCombine","slice","quickSort","quickSortHelp","partitionIndex","pivot","swapIndex","quickSortPartition","SortingVisualizer","props","updateAnimationSpeed","e","newValue","value","parseInt","target","setState","animationSpeed","updateBars","newWidth","newMargin","numBars","barWidth","barMargin","resetArray","state","array","this","randomIntFromInterval","results","SortingAlgorithms","sortedArray","arrayBars","document","getElementsByClassName","aIndexPrev","bIndexPrev","swap","aIndex","bIndex","aStyle","style","bStyle","aStylePrev","bStylePrev","updateColors","swapBars","disableButtons","updateArrayState","resetColors","newHeight","setTimeout","height","aColor","bColor","backgroundColor","numAnimations","buttons","getElementsByTagName","disabled","testArrays","testResults","javaScriptSort","sort","a","b","bubbleSortArray","insertionSortArray","selectionSortArray","mergeSortArray","quickSortArray","arraysAreEqual","console","log","min","max","random","id","className","onClick","type","defaultValue","step","onInput","map","idx","key","width","margin","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4cbf112f.chunk.js","sourcesContent":["// Bubble Sort implementation that returns both an array of animations + the sorted array.\r\nexport const bubbleSort = arr => {\r\n    const animations = [];\r\n    let len = arr.length;\r\n    let anySwaps = false;\r\n\r\n    // Each iteration swaps the greatest element to sorted position on the right.\r\n    for (let i = 0; i < len - 1; i++) {\r\n        anySwaps = false;\r\n        for (let j = 0; j < len - 1 - i; j++) {\r\n            animations.push([-1, j, j + 1])\r\n            if (arr[j] > arr[j + 1]) { // Swaps adjacent bars if left is greater than right.\r\n                animations.push([0, j + 1, j]);\r\n                animations.push([2, j + 1, j]);\r\n                anySwaps = true;\r\n                let temp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = temp;\r\n            } else {\r\n                animations.push([0, j, j + 1]);\r\n            }\r\n        }\r\n\r\n        // Breaks if there were no swaps in the previous loop (array is sorted).\r\n        if (anySwaps === false) {\r\n            break;\r\n        }\r\n    }\r\n    return [\r\n        animations,\r\n        arr\r\n    ];\r\n}\r\n\r\n// Insertion Sort implementation that returns both an array of animations + the sorted array.\r\nexport const insertionSort = arr => {\r\n    const animations = [];\r\n    let len = arr.length;\r\n\r\n    // Iterates through all values of the array (excluding the first index).\r\n    for (let i = 1; i < len; i++) {\r\n        animations.push([-1, i, i]);\r\n        let currentIndex = i;\r\n        // Shifts the values in the array until the current value is sorted.\r\n        while (currentIndex - 1 >= 0 && arr[currentIndex] < arr[currentIndex - 1]) {\r\n            animations.push([0, currentIndex, currentIndex - 1]);\r\n            animations.push([1, currentIndex, currentIndex - 1]);\r\n            let temp = arr[currentIndex];\r\n            arr[currentIndex] = arr[currentIndex - 1];\r\n            arr[currentIndex - 1] = temp;\r\n            currentIndex--;\r\n        }\r\n    }\r\n\r\n    return [\r\n        animations,\r\n        arr\r\n    ];\r\n};\r\n\r\n// Selection Sort implementation that returns both an array of animations + the sorted array.\r\nexport const selectionSort = arr => {\r\n    const animations = [];\r\n\r\n    // Each iteration swaps the least element to sorted position on the left.\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let minIndex = i;\r\n        for (let j = i + 1; j < arr.length; j++) {\r\n            if (arr[minIndex] > arr[j]) { // Updates minIdex if the current value is the new min. \r\n                animations.push([0, j, minIndex]);\r\n                minIndex = j;\r\n            } else {\r\n                animations.push([0, minIndex, j]);\r\n            }\r\n        }\r\n\r\n        animations.push([0, minIndex, i]);\r\n        animations.push([1, minIndex, i]);\r\n        let temp = arr[minIndex];\r\n        arr[minIndex] = arr[i];\r\n        arr[i] = temp;\r\n    }\r\n\r\n    return [\r\n        animations,\r\n        arr\r\n    ];\r\n};\r\n\r\n// Merge Sort implementation that returns both an array of animations + the sorted array.\r\nexport const mergeSort = (arr) => {\r\n    const animations = [];\r\n    mergeSortHelp(animations, arr, arr.slice(), 0, arr.length - 1);\r\n\r\n    return [\r\n        animations,\r\n        arr\r\n    ];\r\n};\r\n\r\n// Recursive helper method for Merge Sort.\r\nfunction mergeSortHelp(animations, arr, aux, lo, hi) {\r\n    if (lo < hi) { // Executes until lo and hi cross (divides the array).\r\n        let mid = Math.floor((lo + hi) / 2);\r\n        mergeSortHelp(animations, arr, aux, lo, mid);\r\n        mergeSortHelp(animations, arr, aux, mid + 1, hi);\r\n\r\n        mergeSortCombine(animations, arr, aux, lo, mid, hi);\r\n    }\r\n}\r\n\r\n// Merging helper method for Merge Sort.\r\nfunction mergeSortCombine(animations, arr, aux, lo, mid, hi) {\r\n    animations.push([-1, lo, hi]);\r\n    let index = lo;\r\n    let i = lo;\r\n    let j = mid + 1;\r\n    \r\n    // Sorts the two sections in their proper places in the auxillary array. \r\n    while (i <= mid && j <= hi) {\r\n        if (arr[i] <= arr[j]) {\r\n            animations.push([0, i, j]);\r\n            animations.push([1, index, index, arr[i]]);\r\n            aux[index++] = arr[i++];\r\n        } else {\r\n            animations.push([0, j, i]);\r\n            animations.push([1, index, index, arr[j]]);\r\n            aux[index++] = arr[j++];\r\n        }\r\n    }\r\n\r\n    /* Copies the largest elements in the first half to the aux array (if applicable).\r\n    Does not need to be done with the second half because they would already be in the\r\n    proper locations. */    \r\n    while (i <= mid) { \r\n        animations.push([1, index, index, arr[i]]);\r\n        aux[index++] = arr[i++];\r\n    }\r\n\r\n    // Copies relevant sections of the aux array to the main arr. \r\n    for (let i = lo; i <= hi; i++) {\r\n        arr[i] = aux[i];\r\n    }\r\n}\r\n\r\n// Quick Sort implementation that returns both an array of animations + the sorted array.\r\nexport const quickSort = (arr) => {\r\n    const animations = [];\r\n    quickSortHelp(animations, arr, 0, arr.length - 1);\r\n\r\n    return [\r\n        animations,\r\n        arr\r\n    ];\r\n};\r\n\r\n// Recursive helper method for Quick Sort.\r\nfunction quickSortHelp(animations, arr, lo, hi) {\r\n    if (lo < hi) {\r\n        var partitionIndex = quickSortPartition(animations, arr, lo, hi);\r\n\r\n        quickSortHelp(animations, arr, lo, partitionIndex - 1);\r\n        quickSortHelp(animations, arr, partitionIndex + 1, hi);\r\n    }\r\n}\r\n\r\n// Partition method for Quick Sort.\r\nfunction quickSortPartition(animations, arr, lo, hi) {\r\n    animations.push([-2, lo, hi]);\r\n    animations.push([-1, hi, hi]);\r\n    const pivot = arr[hi];\r\n    let swapIndex = lo;\r\n\r\n    // Iterates through the current partition.\r\n    for (let i = lo; i < hi; i++) {\r\n        // If the current element is smaller than the pivot, swap with the element at swapIndex.\r\n        if (arr[i] < pivot) {\r\n            animations.push([0, i, hi]);\r\n            animations.push([1, i, swapIndex]);\r\n            let temp = arr[i];\r\n            arr[i] = arr[swapIndex];\r\n            arr[swapIndex] = temp;\r\n            swapIndex++;\r\n        } else {\r\n            animations.push([0, hi, i]);\r\n        }\r\n    }\r\n    // Swaps pivot with current swapIndex (now elements to the left <= pivot <= elements to the right)\r\n    animations.push([2, hi, swapIndex]);\r\n    let temp = arr[hi];\r\n    arr[hi] = arr[swapIndex];\r\n    arr[swapIndex] = temp;\r\n    return swapIndex;\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport * as SortingAlgorithms from '../SortingAlgorithms/SortingAlgorithms.js'\r\n\r\nconst DEBUG = false;\r\n\r\nconst SORTED_MS = 1500;\r\n\r\n// Colors used in the sorting visualizer.\r\nconst PRIMARY_COLOR = '#484f8f';\r\nconst SELECTION_COLOR = '#a6c64c';\r\nconst HIGHER_NUM_COLOR = '#c80003';\r\nconst LOWER_NUM_COLOR = '#405d3a';\r\nconst SORTED_COLOR = '#488f4b';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            animationSpeed: 50,\r\n            numBars: 50,\r\n            barWidth: 1.4,\r\n            barMargin: .2,\r\n        };\r\n    }\r\n\r\n    // Runs when the component is initially loaded.\r\n    componentDidMount() {\r\n        this.resetArray(this.state.numBars);\r\n    }\r\n\r\n    // Generates a random int array of length numBars.\r\n    resetArray(value) {\r\n        const array = [];\r\n\r\n        for (let i = 0; i < value; i++) {\r\n            array.push(this.randomIntFromInterval(5, 65));\r\n        }\r\n\r\n        this.setState({ array });\r\n    }\r\n\r\n    // Handles animations for Bubble Sort.\r\n    bubbleSort() {\r\n        const results = SortingAlgorithms.bubbleSort(this.state.array.slice());\r\n        const animations = results[0];\r\n        const sortedArray = results[1];\r\n\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        let [aIndexPrev, bIndexPrev] = [this.state.numBars - 1, this.state.numBars - 1];\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [swap, aIndex, bIndex] = animations[i];\r\n\r\n            const aStyle = arrayBars[aIndex].style;\r\n            const bStyle = arrayBars[bIndex].style;\r\n            const aStylePrev = arrayBars[aIndexPrev].style;\r\n            const bStylePrev = arrayBars[bIndexPrev].style;\r\n\r\n            if (swap === -1) { // Highlights currently selected bars.\r\n                this.updateColors(aStyle, bStyle, SELECTION_COLOR, SELECTION_COLOR, aStylePrev, bStylePrev, i);\r\n            } else if (swap === 0) { // Comparing two bars.\r\n                this.updateColors(aStyle, bStyle, LOWER_NUM_COLOR, HIGHER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n            } else { // Swapping positions of two bars.\r\n                this.updateColors(aStyle, bStyle, HIGHER_NUM_COLOR, LOWER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n                this.swapBars(aStyle, bStyle, i);\r\n            }\r\n            aIndexPrev = aIndex;\r\n            bIndexPrev = bIndex;\r\n        }\r\n\r\n        this.disableButtons(animations.length);\r\n        this.updateArrayState(sortedArray, animations.length);\r\n        this.resetColors(arrayBars, animations.length);\r\n    }\r\n\r\n    // Handles animations for Insertion Sort.\r\n    insertionSort() {\r\n        const results = SortingAlgorithms.insertionSort(this.state.array.slice());\r\n        const animations = results[0];\r\n        const sortedArray = results[1];\r\n\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        let [aIndexPrev, bIndexPrev] = [this.state.numBars - 1, this.state.numBars - 1];\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [swap, aIndex, bIndex] = animations[i];\r\n\r\n            const aStyle = arrayBars[aIndex].style;\r\n            const bStyle = arrayBars[bIndex].style;\r\n            const aStylePrev = arrayBars[aIndexPrev].style;\r\n            const bStylePrev = arrayBars[bIndexPrev].style;\r\n\r\n            if (swap === -1) { // Highlights currently selected bar.\r\n                this.updateColors(aStyle, bStyle, SELECTION_COLOR, SELECTION_COLOR, aStylePrev, bStylePrev, i);\r\n            } else if (swap === 0) { // Comparing two bars.\r\n                this.updateColors(aStyle, bStyle, LOWER_NUM_COLOR, HIGHER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n            } else { // Swaps positions of two bars. \r\n                this.updateColors(aStyle, bStyle, HIGHER_NUM_COLOR, LOWER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n                this.swapBars(aStyle, bStyle, i);\r\n            }\r\n            aIndexPrev = aIndex;\r\n            bIndexPrev = bIndex;\r\n        }\r\n\r\n        this.disableButtons(animations.length);\r\n        this.updateArrayState(sortedArray, animations.length);\r\n        this.resetColors(arrayBars, animations.length);\r\n    }\r\n\r\n    // Handles animations for Selection Sort.\r\n    selectionSort() {\r\n        const results = SortingAlgorithms.selectionSort(this.state.array.slice());\r\n        const animations = results[0];\r\n        const sortedArray = results[1];\r\n\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        if (DEBUG) console.log(animations);\r\n\r\n        // Variables used to track the swapped array indices.\r\n        let [aIndexPrev, bIndexPrev] = [this.state.numBars - 1, this.state.numBars - 1];\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [swap, aIndex, bIndex] = animations[i];\r\n\r\n            const aStyle = arrayBars[aIndex].style;\r\n            const bStyle = arrayBars[bIndex].style;\r\n            const aStylePrev = arrayBars[aIndexPrev].style;\r\n            const bStylePrev = arrayBars[bIndexPrev].style;\r\n\r\n            if (!swap) { // Comparing two bars.\r\n                if (DEBUG) console.log(\"Compare: \" + animations[i]);\r\n                this.updateColors(aStyle, bStyle, LOWER_NUM_COLOR, HIGHER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n            } else { // Swaps positions of two bars.\r\n                if (DEBUG) console.log(\"Swap: \" + animations[i]);\r\n                this.updateColors(aStyle, bStyle, HIGHER_NUM_COLOR, LOWER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n                this.swapBars(aStyle, bStyle, i);\r\n            }\r\n            aIndexPrev = aIndex;\r\n            bIndexPrev = bIndex;\r\n        }\r\n\r\n        this.disableButtons(animations.length);\r\n        this.updateArrayState(sortedArray, animations.length);\r\n        this.resetColors(arrayBars, animations.length);\r\n    }\r\n\r\n    // Handles animations for Merge Sort.\r\n    mergeSort() {\r\n        const results = SortingAlgorithms.mergeSort(this.state.array.slice());\r\n        const animations = results[0];\r\n        const sortedArray = results[1];\r\n\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        let [aIndexPrev, bIndexPrev] = [this.state.numBars - 1, this.state.numBars - 1];\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [state, aIndex, bIndex] = animations[i];\r\n\r\n            const aStyle = arrayBars[aIndex].style;\r\n            const bStyle = arrayBars[bIndex].style;\r\n            const aStylePrev = arrayBars[aIndexPrev].style;\r\n            const bStylePrev = arrayBars[bIndexPrev].style;\r\n\r\n            if (state === -1) { // Highlighting hi and lo.\r\n                this.updateColors(aStyle, bStyle, SELECTION_COLOR, SELECTION_COLOR, aStylePrev, bStylePrev, i);\r\n            } else if (state === 0) { // Comparing two bars from partitions.\r\n                this.updateColors(aStyle, bStyle, LOWER_NUM_COLOR, HIGHER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n            } else { // Updating bar at swapIndex with new height (can't fully visualize because of aux array).\r\n                this.updateColors(aStyle, bStyle, HIGHER_NUM_COLOR, LOWER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n                let newHeight = animations[i][3];\r\n\r\n                setTimeout(() => {\r\n                    aStyle.height = `${newHeight}vh`;\r\n                }, i * this.state.animationSpeed);\r\n            }\r\n            aIndexPrev = aIndex;\r\n            bIndexPrev = bIndex;\r\n        }\r\n\r\n        this.disableButtons(animations.length);\r\n        this.updateArrayState(sortedArray, animations.length);\r\n        this.resetColors(arrayBars, animations.length);\r\n    }\r\n\r\n    // Handles animations for Quick Sort.\r\n    quickSort() {\r\n        const results = SortingAlgorithms.quickSort(this.state.array.slice());\r\n        const animations = results[0];\r\n        const sortedArray = results[1];\r\n\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        let [aIndexPrev, bIndexPrev] = [this.state.numBars - 1, this.state.numBars - 1];\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [state, aIndex, bIndex] = animations[i];\r\n\r\n            const aStyle = arrayBars[aIndex].style;\r\n            const bStyle = arrayBars[bIndex].style;\r\n            const aStylePrev = arrayBars[aIndexPrev].style;\r\n            const bStylePrev = arrayBars[bIndexPrev].style;\r\n\r\n            if (state === -2) { // Highlighting hi and lo of current partition. \r\n                if (DEBUG) console.log(\"lo: \" + aIndex + \" hi: \" + bIndex);\r\n                this.updateColors(aStyle, bStyle, SELECTION_COLOR, SELECTION_COLOR, aStylePrev, bStylePrev, i);\r\n\r\n            } else if (state === -1) { // Highlighting pivot index.\r\n                if (DEBUG) console.log(\"pivot: \" + aIndex);\r\n                this.updateColors(aStyle, bStyle, SELECTION_COLOR, SELECTION_COLOR, aStylePrev, bStylePrev, i);\r\n\r\n            } else if (state === 0) { // Comparing current bar with pivot.\r\n                if (DEBUG) console.log(\"comparison: [\" + aIndex + \", \" + bIndex + \"]\");\r\n                this.updateColors(aStyle, bStyle, LOWER_NUM_COLOR, HIGHER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n\r\n            } else if (state === 1) { // Swapping current selection with swap index if less than pivot\r\n                if (DEBUG) console.log(\"swapping: [\" + aIndex + \", \" + bIndex + \"]\");\r\n                this.updateColors(aStyle, bStyle, HIGHER_NUM_COLOR, LOWER_NUM_COLOR, aStylePrev, bStylePrev, i);\r\n                this.swapBars(aStyle, bStyle, i);\r\n\r\n            } else { // Swapping pivot bar with swap index. \r\n                if (DEBUG) console.log(\"swap pivot: [\" + aIndex + \", \" + bIndex + \"]\");\r\n                this.updateColors(aStyle, bStyle, PRIMARY_COLOR, PRIMARY_COLOR, aStylePrev, bStylePrev, i);\r\n                this.swapBars(aStyle, bStyle, i);\r\n\r\n            }\r\n            aIndexPrev = aIndex;\r\n            bIndexPrev = bIndex;\r\n        }\r\n\r\n        this.disableButtons(animations.length);\r\n        this.updateArrayState(sortedArray, animations.length);\r\n        this.resetColors(arrayBars, animations.length);\r\n    }\r\n\r\n    // Resets the bars used in the previous animation to the primary color and updates the colors of bars A and B. \r\n    updateColors(aStyle, bStyle, aColor, bColor, aStylePrev, bStylePrev, i) {\r\n        setTimeout(() => {\r\n            aStylePrev.backgroundColor = PRIMARY_COLOR;\r\n            bStylePrev.backgroundColor = PRIMARY_COLOR;\r\n            aStyle.backgroundColor = aColor;\r\n            bStyle.backgroundColor = bColor;\r\n        }, i * this.state.animationSpeed);\r\n    }\r\n\r\n    // Swaps the heights of bars A and B.\r\n    swapBars(aStyle, bStyle, i) {\r\n        setTimeout(() => {\r\n            let temp = aStyle.height;\r\n            aStyle.height = bStyle.height;\r\n            bStyle.height = temp;\r\n        }, i * this.state.animationSpeed);\r\n    }\r\n\r\n    // Resets the colors of all array bars to the primary color.\r\n    resetColors(arrayBars, numAnimations) {\r\n        setTimeout(() => {\r\n            for (let i = 0; i < this.state.numBars; i++) {\r\n                arrayBars[i].style.backgroundColor = SORTED_COLOR;\r\n            }\r\n        }, numAnimations * this.state.animationSpeed);\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < this.state.numBars; i++) {\r\n                arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n            }\r\n        }, (numAnimations * this.state.animationSpeed) + SORTED_MS);\r\n    }\r\n\r\n    // Temporarily disables buttons until sorting is complete.\r\n    disableButtons(numAnimations) {\r\n        const buttons = document.getElementsByTagName('button');\r\n\r\n        for (let i = 0; i < buttons.length; i++) {\r\n            buttons[i].disabled = true;\r\n        }\r\n\r\n        // Enables buttons after all animations have finished.\r\n        setTimeout(() => {\r\n            for (let i = 0; i < buttons.length; i++) {\r\n                buttons[i].disabled = false;\r\n            }\r\n        }, (numAnimations * this.state.animationSpeed) + SORTED_MS);\r\n    }\r\n\r\n    // Updates the state once all animations have finished.\r\n    updateArrayState(sortedArray, numAnimations) {\r\n        setTimeout(() => {\r\n            this.setState({ array: sortedArray });\r\n        }, numAnimations * this.state.animationSpeed);\r\n    }\r\n\r\n    // Tests the validity of all sorting algorithms.\r\n    testAlgorithms() {\r\n        /* Creates 100 random arrays of size 1 - 1000 with values ranging from -1000 - 1000, \r\n        sorts them using my sorting implementations and JavaScript's built-in sort, and \r\n        compares the two resulting arrays.\r\n        */\r\n        const testArrays = [];\r\n        for (let i = 0; i < 100; i++) {\r\n            let array = [];\r\n            const len = this.randomIntFromInterval(1, 1000);\r\n            for (let j = 0; j < len; j++) {\r\n                array.push(this.randomIntFromInterval(-1000, 1000));\r\n            }\r\n            testArrays[i] = array;\r\n        }\r\n\r\n        let testResults = [0, 0, 0, 0, 0];\r\n\r\n        for (let i = 0; i < 100; i++) { // Tests sorts on 100 unique arrays.\r\n            const javaScriptSort = testArrays[i].slice().sort((a, b) => a - b);\r\n            const bubbleSortArray = SortingAlgorithms.bubbleSort(testArrays[i].slice())[1];\r\n            const insertionSortArray = SortingAlgorithms.insertionSort(testArrays[i].slice())[1];\r\n            const selectionSortArray = SortingAlgorithms.selectionSort(testArrays[i].slice())[1];\r\n            const mergeSortArray = SortingAlgorithms.mergeSort(testArrays[i].slice())[1];\r\n            const quickSortArray = SortingAlgorithms.quickSort(testArrays[i].slice())[1];\r\n\r\n            // Increments corresponding value in testResults if implemented sort matches JavaScript's sort.\r\n            if (this.arraysAreEqual(javaScriptSort, bubbleSortArray)) testResults[0]++;\r\n            if (this.arraysAreEqual(javaScriptSort, insertionSortArray)) testResults[1]++;\r\n            if (this.arraysAreEqual(javaScriptSort, selectionSortArray)) testResults[2]++;\r\n            if (this.arraysAreEqual(javaScriptSort, mergeSortArray)) testResults[3]++;\r\n            if (this.arraysAreEqual(javaScriptSort, quickSortArray)) testResults[4]++;\r\n        }\r\n\r\n        console.log(\"Bubble Sort: \" + testResults[0] + \" correct\");\r\n        console.log(\"Insertion Sort: \" + testResults[1] + \" correct\");\r\n        console.log(\"Selection Sort: \" + testResults[2] + \" correct\");\r\n        console.log(\"Merge Sort: \" + testResults[3] + \" correct\");\r\n        console.log(\"Quick Sort: \" + testResults[4] + \" correct\");\r\n    }\r\n\r\n    // Determines whether two arrays are equal, taking order into account.\r\n    arraysAreEqual(a, b) {\r\n        if (a === b) return true;\r\n        if (a == null || b == null) return false;\r\n        if (a.length !== b.length) return false;\r\n\r\n        for (var i = 0; i < a.length; ++i) {\r\n            if (a[i] !== b[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Generates a random integer from the given interval (inclusive min/max).\r\n    randomIntFromInterval(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    updateAnimationSpeed = (e) => {\r\n        let value = parseInt(e.target.value);\r\n        let newValue;\r\n\r\n        if (value === 10) newValue = 1000;\r\n        else if (value === 20) newValue = 500;\r\n        else if (value === 30) newValue = 100;\r\n        else if (value === 40) newValue = 50;\r\n        else newValue = 10;\r\n\r\n        this.setState({ animationSpeed: newValue });\r\n    }\r\n\r\n    updateBars = (e) => {\r\n        let value = parseInt(e.target.value);\r\n\r\n        if (value === 10) {\r\n            var newValue = 15;\r\n            var newWidth = 5.5;\r\n            var newMargin = .25;\r\n        } else if (value === 20) {\r\n            var newValue = 25;\r\n            var newWidth = 3.1;\r\n            var newMargin = .25;\r\n        } else if (value === 30) {\r\n            var newValue = 50;\r\n            var newWidth = 1.4;\r\n            var newMargin = .2;\r\n        } else if (value === 40) {\r\n            var newValue = 75;\r\n            var newWidth = .9;\r\n            var newMargin = .15;\r\n        } else {\r\n            var newValue = 100;\r\n            var newWidth = .6;\r\n            var newMargin = .15;\r\n        }\r\n\r\n        this.setState({ \r\n            numBars: newValue,\r\n            barWidth: newWidth,\r\n            barMargin: newMargin\r\n        });\r\n        this.resetArray(newValue);\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <header>\r\n                    <div id=\"title\">sorting visualizer</div>\r\n                </header>\r\n\r\n                <div>\r\n                    <button className=\"center-button\" onClick={() => this.resetArray(this.state.numBars)}>generate new array</button>\r\n                    <input type=\"range\" id=\"volume\" defaultValue=\"30\" min=\"10\" max=\"50\"\r\n                        step=\"10\" onInput={this.updateAnimationSpeed} />\r\n                    <input type=\"range\" id=\"volume\" defaultValue=\"30\" min=\"10\" max=\"50\"\r\n                        step=\"10\" onInput={this.updateBars} />\r\n                    {/* <button className=\"center-button\" onClick={() => this.testAlgorithms()}>test algorithms</button> */}\r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                height: `${value}vh`,\r\n                                width: `${this.state.barWidth}vw`,\r\n                                margin: `${this.state.barMargin}vw`,\r\n                            }}\r\n\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n                <div>\r\n                    <button className=\"bottom-button\" onClick={() => this.bubbleSort()}>bubble</button>\r\n                    <button className=\"bottom-button\" onClick={() => this.insertionSort()}>insertion</button>\r\n                    <button className=\"bottom-button\" onClick={() => this.selectionSort()}>selection</button>\r\n                    <button className=\"bottom-button\" onClick={() => this.mergeSort()}>merge</button>\r\n                    <button className=\"bottom-button\" onClick={() => this.quickSort()}>quick</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}